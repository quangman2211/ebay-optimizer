import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Grid,
  Card,
  CardHeader,
  CardContent,
  Chip,
  Alert,
  LinearProgress,
  IconButton,
  Menu,
  MenuItem,
  Divider,
  Badge,
  CircularProgress,
  TextField,
  InputAdornment,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemAvatar,
  Avatar,
  Collapse,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Tooltip
} from '@mui/material';
import {
  Add as AddIcon,
  Sync as SyncIcon,
  TrendingUp as OptimizeIcon,
  Speed as SpeedIcon,
  Assignment as TaskIcon,
  AccountCircle as AccountIcon,
  KeyboardArrowDown as ArrowDownIcon,
  CheckCircle as CompleteIcon,
  Schedule as PendingIcon,
  Search as SearchIcon,
  Business as SupplierIcon,
  Inventory as ProductIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  Star as RatingIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Visibility as ViewIcon
} from '@mui/icons-material';
import MainLayout from '../components/Layout/MainLayout';
import { useAuth } from '../context/AuthContext';
import { listingsAPI, ordersAPI, accountsAPI, dashboardAPI } from '../services/api';

const EmployeeWorkspace = () => {
  const { } = useAuth();
  const [selectedAccount, setSelectedAccount] = useState('seller123@email.com');
  const [accountMenuAnchor, setAccountMenuAnchor] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Employee performance data - now from API
  const [todayStats, setTodayStats] = useState({
    listingsToday: 0,
    targetListings: 50,
    avgTimePerListing: 0,
    successRate: 0,
    weeklyListings: 0,
    monthlyListings: 0
  });

  // Work queue data - now from API
  const [workQueue, setWorkQueue] = useState({
    drafts: 0,
    pendingOptimization: 0,
    failedSyncs: 0,
    missingImages: 0
  });

  // Available accounts - now from API
  const [accounts, setAccounts] = useState([]);

  // New states for supplier directory and product lookup
  const [suppliers, setSuppliers] = useState([]);
  const [products, setProducts] = useState([]);
  const [supplierSearch, setSupplierSearch] = useState('');
  const [productSearch, setProductSearch] = useState('');
  const [expandedSupplier, setExpandedSupplier] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [openProductDialog, setOpenProductDialog] = useState(false);
  const [quickLookupMode, setQuickLookupMode] = useState('supplier'); // 'supplier' or 'product'

  const currentAccount = accounts.find(acc => acc.email === selectedAccount) || {
    email: selectedAccount,
    status: 'active',
    syncTime: 'ƒêang t·∫£i...',
    listings: 0,
    revenue: 0
  };

  // Load suppliers and products for quick lookup
  const loadSuppliersAndProducts = async () => {
    try {
      // Load suppliers
      const suppliersResponse = await fetch('/api/v1/suppliers?size=50&status=active');
      const suppliersData = await suppliersResponse.json();
      if (suppliersData.success !== false) {
        setSuppliers(suppliersData.items || []);
      }

      // Load products
      const productsResponse = await fetch('/api/v1/products?size=100&status=active');
      const productsData = await productsResponse.json();
      if (productsData.success !== false) {
        setProducts(productsData.items || []);
      }
    } catch (error) {
      console.error('Error loading suppliers/products:', error);
    }
  };

  // Fetch data from API
  useEffect(() => {
    const fetchWorkspaceData = async () => {
      try {
        setLoading(true);
        setError(null);

        // Fetch accounts
        const accountsResponse = await accountsAPI.getAll({ page: 1, size: 100 });
        if (accountsResponse.data?.items) {
          const transformedAccounts = accountsResponse.data.items.map(account => ({
            email: account.username || account.email || `account_${account.id}`,
            status: account.status || 'active',
            syncTime: account.last_activity ? new Date(account.last_activity).toLocaleString('vi-VN') : 'Ch∆∞a c√≥',
            listings: account.total_listings || 0,
            revenue: account.monthly_revenue || 0
          }));
          setAccounts(transformedAccounts);
          
          // Set first account as selected if none selected
          if (transformedAccounts.length > 0 && !selectedAccount) {
            setSelectedAccount(transformedAccounts[0].email);
          }
        }

        // Fetch dashboard stats
        const statsResponse = await dashboardAPI.getStats();
        if (statsResponse.data?.data) {
          const stats = statsResponse.data.data;
          setTodayStats({
            listingsToday: stats.daily_listings || 0,
            targetListings: 50,
            avgTimePerListing: 3.2, // This would come from employee metrics API
            successRate: Math.round((stats.active_listings / Math.max(stats.total_listings, 1)) * 100) || 0,
            weeklyListings: stats.weekly_listings || 0,
            monthlyListings: stats.monthly_listings || 0
          });
        }

        // Calculate work queue from listings and orders
        const listingsResponse = await listingsAPI.getAll({ page: 1, size: 100 });
        const ordersResponse = await ordersAPI.getAll({ page: 1, size: 100 });
        
        if (listingsResponse.data?.items) {
          const listings = listingsResponse.data.items;
          const orders = ordersResponse.data?.items || [];
          
          setWorkQueue({
            drafts: listings.filter(l => l.status === 'draft').length,
            pendingOptimization: listings.filter(l => (l.performance_score || 0) < 70).length,
            failedSyncs: orders.filter(o => !o.tracking_number && o.status === 'shipped').length,
            missingImages: listings.filter(l => !l.images || l.images.length === 0).length
          });
        }

        // Load suppliers and products for fulfillment lookup
        await loadSuppliersAndProducts();
        
      } catch (err) {
        console.error('EmployeeWorkspace: Error fetching data:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu workspace. Vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        setLoading(false);
      }
    };

    fetchWorkspaceData();
  }, [selectedAccount]);
  
  const handleAccountSwitch = (accountEmail) => {
    setSelectedAccount(accountEmail);
    setAccountMenuAnchor(null);
  };

  const getProgressPercentage = () => {
    return Math.min((todayStats.listingsToday / todayStats.targetListings) * 100, 100);
  };

  const getWorkQueueTotal = () => {
    return Object.values(workQueue).reduce((sum, count) => sum + count, 0);
  };

  const handleQuickAction = (action) => {
    switch(action) {
      case 'new-listing':
        window.location.href = '/listings/create';
        break;
      case 'bulk-optimize':
        // Open bulk optimization modal
        console.log('Opening bulk optimize modal');
        break;
      case 'sync-all':
        // Trigger sync for all accounts
        console.log('Syncing all accounts');
        break;
      default:
        break;
    }
  };

  // New utility functions for supplier/product lookup
  const filteredSuppliers = suppliers.filter(supplier =>
    supplier.name?.toLowerCase().includes(supplierSearch.toLowerCase()) ||
    supplier.company_name?.toLowerCase().includes(supplierSearch.toLowerCase()) ||
    supplier.contact_person?.toLowerCase().includes(supplierSearch.toLowerCase())
  );

  const filteredProducts = products.filter(product =>
    product.name?.toLowerCase().includes(productSearch.toLowerCase()) ||
    product.sku?.toLowerCase().includes(productSearch.toLowerCase()) ||
    product.category?.toLowerCase().includes(productSearch.toLowerCase())
  );

  const handleSupplierToggle = (supplierId) => {
    setExpandedSupplier(expandedSupplier === supplierId ? null : supplierId);
  };

  const handleProductView = (product) => {
    setSelectedProduct(product);
    setOpenProductDialog(true);
  };

  const getSupplierProducts = (supplierId) => {
    return products.filter(p => 
      p.primary_supplier_id === supplierId || p.backup_supplier_id === supplierId
    );
  };

  const getStockLevelColor = (stock, minStock) => {
    if (stock === 0) return 'error';
    if (stock <= minStock) return 'warning';
    return 'success';
  };

  const getStockIcon = (stock, minStock) => {
    if (stock === 0) return 'üî¥';
    if (stock <= minStock) return 'üü°';
    return 'üü¢';
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'USD',
    }).format(price);
  };

  const calculateProfitMargin = (sellingPrice, costPrice) => {
    if (!sellingPrice || !costPrice) return 0;
    return ((sellingPrice - costPrice) / sellingPrice * 100).toFixed(1);
  };

  if (loading) {
    return (
      <MainLayout>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>
          <CircularProgress size={60} />
          <Typography variant="h6" sx={{ ml: 2 }}>ƒêang t·∫£i workspace...</Typography>
        </Box>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
          <Button 
            variant="outlined" 
            size="small" 
            sx={{ ml: 2 }}
            onClick={() => window.location.reload()}
          >
            Th·ª≠ l·∫°i
          </Button>
        </Alert>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      {/* Employee Quick Actions Bar */}
      <Card sx={{ 
        mb: 3,
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        color: 'white'
      }}>
        <CardContent sx={{ py: 2 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={8}>
              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>
                <Button
                  variant="contained"
                  color="inherit"
                  startIcon={<AddIcon />}
                  sx={{ 
                    bgcolor: 'rgba(255, 255, 255, 0.2)', 
                    '&:hover': { bgcolor: 'rgba(255, 255, 255, 0.3)' },
                    color: 'white'
                  }}
                  onClick={() => window.location.href = '/quick-listing'}
                >
                  T·∫°o Listing (Ctrl+N)
                </Button>
                <Button
                  variant="outlined"
                  startIcon={<OptimizeIcon />}
                  sx={{ 
                    borderColor: 'rgba(255, 255, 255, 0.5)', 
                    color: 'white',
                    '&:hover': { 
                      borderColor: 'white', 
                      bgcolor: 'rgba(255, 255, 255, 0.1)' 
                    }
                  }}
                  onClick={() => handleQuickAction('bulk-optimize')}
                >
                  T·ªëi ∆Øu H√†ng Lo·∫°t
                </Button>
                <Button
                  variant="outlined"
                  startIcon={<SyncIcon />}
                  sx={{ 
                    borderColor: 'rgba(255, 255, 255, 0.5)', 
                    color: 'white',
                    '&:hover': { 
                      borderColor: 'white', 
                      bgcolor: 'rgba(255, 255, 255, 0.1)' 
                    }
                  }}
                  onClick={() => handleQuickAction('sync-all')}
                >
                  ƒê·ªìng B·ªô T·∫•t C·∫£
                </Button>
              </Box>
            </Grid>
            <Grid item xs={12} md={4}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', gap: 1 }}>
                <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                  T√†i kho·∫£n:
                </Typography>
                <Button
                  variant="text"
                  endIcon={<ArrowDownIcon />}
                  sx={{ 
                    color: 'white',
                    textTransform: 'none',
                    '&:hover': { bgcolor: 'rgba(255, 255, 255, 0.1)' }
                  }}
                  onClick={(e) => setAccountMenuAnchor(e.currentTarget)}
                >
                  {selectedAccount}
                </Button>
                <Menu
                  anchorEl={accountMenuAnchor}
                  open={Boolean(accountMenuAnchor)}
                  onClose={() => setAccountMenuAnchor(null)}
                >
                  {accounts.map((account) => (
                    <MenuItem 
                      key={account.email}
                      onClick={() => handleAccountSwitch(account.email)}
                      selected={account.email === selectedAccount}
                    >
                      <Box>
                        <Typography variant="body2">{account.email}</Typography>
                        <Typography variant="caption" color="textSecondary">
                          {account.listings} listings ‚Ä¢ ${account.revenue.toLocaleString()}
                        </Typography>
                      </Box>
                    </MenuItem>
                  ))}
                </Menu>
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Performance Dashboard */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: '#e8f5e8', border: '2px solid #4caf50' }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <SpeedIcon sx={{ fontSize: 40, color: '#4caf50', mb: 1 }} />
              <Typography variant="h3" color="success.main" fontWeight="bold">
                {todayStats.listingsToday}
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Listings h√¥m nay
              </Typography>
              <LinearProgress 
                variant="determinate" 
                value={getProgressPercentage()} 
                sx={{ 
                  height: 6, 
                  borderRadius: 3,
                  bgcolor: '#c8e6c9',
                  '& .MuiLinearProgress-bar': { bgcolor: '#4caf50' }
                }}
              />
              <Typography variant="caption" color="success.main" sx={{ mt: 1, display: 'block' }}>
                M·ª•c ti√™u: {todayStats.targetListings} ({Math.round(getProgressPercentage())}%)
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: '#fff3e0', border: '2px solid #ff9800' }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <TaskIcon sx={{ fontSize: 40, color: '#ff9800', mb: 1 }} />
              <Typography variant="h3" color="warning.main" fontWeight="bold">
                {todayStats.avgTimePerListing}m
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Th·ªùi gian TB/listing
              </Typography>
              <Typography variant="caption" color="success.main">
                C·∫£i thi·ªán: -0.8 ph√∫t (‚Üë18%)
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: '#e3f2fd', border: '2px solid #2196f3' }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <CompleteIcon sx={{ fontSize: 40, color: '#2196f3', mb: 1 }} />
              <Typography variant="h3" color="primary.main" fontWeight="bold">
                {todayStats.successRate}%
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                T·ª∑ l·ªá th√†nh c√¥ng
              </Typography>
              <Typography variant="caption" color="primary.main">
                {Math.floor((todayStats.successRate/100) * todayStats.listingsToday)}/{todayStats.listingsToday} published
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: '#fce4ec', border: '2px solid #e91e63' }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <Badge badgeContent={getWorkQueueTotal()} color="error">
                <PendingIcon sx={{ fontSize: 40, color: '#e91e63', mb: 1 }} />
              </Badge>
              <Typography variant="h3" color="secondary.main" fontWeight="bold">
                {getWorkQueueTotal()}
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                C√¥ng vi·ªác ch·ªù
              </Typography>
              <Typography variant="caption" color="secondary.main">
                C·∫ßn x·ª≠ l√Ω ngay
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Work Queue & Performance Analysis */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={7}>
          <Card>
            <CardHeader 
              title="üî• H√†ng ƒê·ª£i C√¥ng Vi·ªác ∆Øu Ti√™n" 
              subheader="C√°c task c·∫ßn x·ª≠ l√Ω ngay"
            />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={6} sm={3}>
                  <Card variant="outlined" sx={{ bgcolor: '#f3e5f5', border: '1px solid #9c27b0' }}>
                    <CardContent sx={{ textAlign: 'center', py: 2 }}>
                      <Typography variant="h4" color="primary" fontWeight="bold">
                        {workQueue.drafts}
                      </Typography>
                      <Typography variant="body2" gutterBottom>Drafts</Typography>
                      <Button 
                        size="small" 
                        variant="outlined" 
                        color="primary"
                        onClick={() => window.location.href = '/listings?filter=drafts'}
                      >
                        X·ª≠ l√Ω
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card variant="outlined" sx={{ bgcolor: '#fff8e1', border: '1px solid #ff9800' }}>
                    <CardContent sx={{ textAlign: 'center', py: 2 }}>
                      <Typography variant="h4" color="warning.main" fontWeight="bold">
                        {workQueue.pendingOptimization}
                      </Typography>
                      <Typography variant="body2" gutterBottom>C·∫ßn t·ªëi ∆∞u</Typography>
                      <Button 
                        size="small" 
                        variant="outlined" 
                        color="warning"
                        onClick={() => handleQuickAction('bulk-optimize')}
                      >
                        T·ªëi ∆∞u
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card variant="outlined" sx={{ bgcolor: '#ffebee', border: '1px solid #f44336' }}>
                    <CardContent sx={{ textAlign: 'center', py: 2 }}>
                      <Typography variant="h4" color="error" fontWeight="bold">
                        {workQueue.failedSyncs}
                      </Typography>
                      <Typography variant="body2" gutterBottom>L·ªói sync</Typography>
                      <Button 
                        size="small" 
                        variant="outlined" 
                        color="error"
                        onClick={() => window.location.href = '/sync?filter=failed'}
                      >
                        Kh·∫Øc ph·ª•c
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card variant="outlined" sx={{ bgcolor: '#e8f5e8', border: '1px solid #4caf50' }}>
                    <CardContent sx={{ textAlign: 'center', py: 2 }}>
                      <Typography variant="h4" color="success.main" fontWeight="bold">
                        {workQueue.missingImages}
                      </Typography>
                      <Typography variant="body2" gutterBottom>Thi·∫øu h√¨nh</Typography>
                      <Button 
                        size="small" 
                        variant="outlined" 
                        color="success"
                        onClick={() => window.location.href = '/listings?filter=no-images'}
                      >
                        Upload
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={5}>
          <Card>
            <CardHeader 
              title="üìä Hi·ªáu Su·∫•t C√° Nh√¢n" 
              subheader="Tracking ti·∫øn ƒë·ªô v√† c·∫£i thi·ªán"
            />
            <CardContent>
              {/* Current Account Info */}
              <Box sx={{ 
                p: 2, 
                bgcolor: currentAccount?.status === 'active' ? '#e8f5e8' : '#fff3e0', 
                borderRadius: 1, 
                mb: 2,
                border: `1px solid ${currentAccount?.status === 'active' ? '#4caf50' : '#ff9800'}`
              }}>
                <Typography variant="body2" color="textSecondary">T√†i kho·∫£n hi·ªán t·∫°i:</Typography>
                <Typography variant="h6">{selectedAccount}</Typography>
                <Typography variant="caption" color="textSecondary">
                  üìä {currentAccount?.listings.toLocaleString()} listings ‚Ä¢ 
                  üí∞ ${currentAccount?.revenue.toLocaleString()} ‚Ä¢ 
                  üîÑ Sync: {currentAccount?.syncTime}
                </Typography>
              </Box>

              {/* Performance Progress */}
              <Box sx={{ mb: 2 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                  <Typography variant="body2" color="textSecondary">Ti·∫øn ƒë·ªô h√¥m nay</Typography>
                  <Typography variant="body2" fontWeight="bold">
                    {todayStats.listingsToday}/{todayStats.targetListings}
                  </Typography>
                </Box>
                <LinearProgress 
                  variant="determinate" 
                  value={getProgressPercentage()} 
                  sx={{ 
                    height: 12, 
                    borderRadius: 6,
                    bgcolor: '#f0f0f0',
                    '& .MuiLinearProgress-bar': { 
                      borderRadius: 6,
                      background: 'linear-gradient(90deg, #4caf50 0%, #8bc34a 100%)'
                    }
                  }}
                />
                <Typography variant="caption" color="success.main" sx={{ mt: 0.5, display: 'block' }}>
                  üéØ C√≤n {Math.max(todayStats.targetListings - todayStats.listingsToday, 0)} listings ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u
                </Typography>
              </Box>

              {/* Weekly/Monthly Stats */}
              <Grid container spacing={2} sx={{ mb: 2 }}>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Tu·∫ßn n√†y</Typography>
                  <Typography variant="h6">{todayStats.weeklyListings}</Typography>
                  <Typography variant="caption" color="success.main">+8% ‚Üó</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Th√°ng n√†y</Typography>
                  <Typography variant="h6">{todayStats.monthlyListings}</Typography>
                  <Typography variant="caption" color="success.main">+15% ‚Üó</Typography>
                </Grid>
              </Grid>

              <Divider sx={{ my: 2 }} />
              
              <Button 
                variant="contained" 
                fullWidth 
                startIcon={<SpeedIcon />}
                onClick={() => window.location.href = '/analytics/personal'}
              >
                Xem b√°o c√°o chi ti·∫øt
              </Button>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Quick Lookup Section for Fulfillment Staff */}
      <Card sx={{ mb: 3 }}>
        <CardHeader 
          title="‚ö° Tra C·ª©u Nhanh - Fulfillment Support" 
          subheader="T√¨m ki·∫øm nh√† cung c·∫•p v√† s·∫£n ph·∫©m cho vi·ªác fulfillment ƒë∆°n h√†ng"
          action={
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button
                variant={quickLookupMode === 'supplier' ? 'contained' : 'outlined'}
                size="small"
                startIcon={<SupplierIcon />}
                onClick={() => setQuickLookupMode('supplier')}
              >
                Nh√† Cung C·∫•p
              </Button>
              <Button
                variant={quickLookupMode === 'product' ? 'contained' : 'outlined'}
                size="small"
                startIcon={<ProductIcon />}
                onClick={() => setQuickLookupMode('product')}
              >
                S·∫£n Ph·∫©m
              </Button>
            </Box>
          }
        />
        <CardContent>
          <Grid container spacing={3}>
            {/* Supplier Directory */}
            {quickLookupMode === 'supplier' && (
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  placeholder="T√¨m ki·∫øm nh√† cung c·∫•p theo t√™n, c√¥ng ty ho·∫∑c ng∆∞·ªùi li√™n h·ªá..."
                  value={supplierSearch}
                  onChange={(e) => setSupplierSearch(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon />
                      </InputAdornment>
                    )
                  }}
                  sx={{ mb: 2 }}
                />
                
                <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
                  <List>
                    {filteredSuppliers.slice(0, 10).map((supplier) => {
                      const supplierProducts = getSupplierProducts(supplier.id);
                      const isExpanded = expandedSupplier === supplier.id;
                      
                      return (
                        <React.Fragment key={supplier.id}>
                          <ListItem 
                            button 
                            onClick={() => handleSupplierToggle(supplier.id)}
                            sx={{ 
                              border: '1px solid #e0e0e0', 
                              borderRadius: 1, 
                              mb: 1,
                              '&:hover': { bgcolor: '#f5f5f5' }
                            }}
                          >
                            <ListItemAvatar>
                              <Avatar sx={{ bgcolor: 'primary.main' }}>
                                <SupplierIcon />
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={
                                <Box>
                                  <Typography variant="subtitle1" fontWeight="bold">
                                    {supplier.name}
                                  </Typography>
                                  {supplier.company_name && (
                                    <Typography variant="body2" color="text.secondary">
                                      {supplier.company_name}
                                    </Typography>
                                  )}
                                </Box>
                              }
                              secondary={
                                <Box sx={{ mt: 1 }}>
                                  <Grid container spacing={2}>
                                    <Grid item xs={12} sm={6}>
                                      {supplier.contact_person && (
                                        <Box display="flex" alignItems="center" gap={0.5}>
                                          <AccountIcon sx={{ fontSize: 14 }} />
                                          <Typography variant="caption">
                                            {supplier.contact_person}
                                          </Typography>
                                        </Box>
                                      )}
                                      {supplier.phone && (
                                        <Box display="flex" alignItems="center" gap={0.5}>
                                          <PhoneIcon sx={{ fontSize: 14 }} />
                                          <Typography variant="caption">
                                            {supplier.phone}
                                          </Typography>
                                        </Box>
                                      )}
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                      {supplier.email && (
                                        <Box display="flex" alignItems="center" gap={0.5}>
                                          <EmailIcon sx={{ fontSize: 14 }} />
                                          <Typography variant="caption">
                                            {supplier.email}
                                          </Typography>
                                        </Box>
                                      )}
                                      <Box display="flex" alignItems="center" gap={0.5}>
                                        <RatingIcon sx={{ fontSize: 14 }} />
                                        <Typography variant="caption">
                                          Rating: {supplier.performance_rating?.toFixed(1) || 'N/A'}
                                        </Typography>
                                      </Box>
                                    </Grid>
                                  </Grid>
                                  <Box sx={{ mt: 1, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                                    <Chip 
                                      size="small" 
                                      label={`${supplierProducts.length} s·∫£n ph·∫©m`}
                                      color="primary"
                                      variant="outlined"
                                    />
                                    <Chip 
                                      size="small" 
                                      label={supplier.payment_terms || 'NET 30'}
                                      color="default"
                                      variant="outlined"
                                    />
                                    <Chip 
                                      size="small" 
                                      label={`${supplier.average_delivery_days || 15} ng√†y`}
                                      color="success"
                                      variant="outlined"
                                    />
                                  </Box>
                                </Box>
                              }
                            />
                            <ListItemIcon>
                              {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                            </ListItemIcon>
                          </ListItem>
                          
                          <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                            <Card variant="outlined" sx={{ ml: 2, mb: 1 }}>
                              <CardContent sx={{ py: 2 }}>
                                <Typography variant="subtitle2" gutterBottom>
                                  S·∫£n ph·∫©m t·ª´ nh√† cung c·∫•p n√†y ({supplierProducts.length}):
                                </Typography>
                                {supplierProducts.length > 0 ? (
                                  <Grid container spacing={1}>
                                    {supplierProducts.slice(0, 6).map((product) => (
                                      <Grid item xs={12} sm={6} md={4} key={product.id}>
                                        <Card 
                                          variant="outlined" 
                                          sx={{ p: 1, cursor: 'pointer' }}
                                          onClick={() => handleProductView(product)}
                                        >
                                          <Typography variant="caption" fontWeight="bold">
                                            {product.name}
                                          </Typography>
                                          <Typography variant="caption" display="block" color="text.secondary">
                                            SKU: {product.sku}
                                          </Typography>
                                          <Box display="flex" justifyContent="space-between" alignItems="center" mt={0.5}>
                                            <Typography variant="caption">
                                              {getStockIcon(product.stock_level, product.minimum_stock)} {product.stock_level}
                                            </Typography>
                                            <Typography variant="caption" fontWeight="bold">
                                              {formatPrice(product.selling_price || 0)}
                                            </Typography>
                                          </Box>
                                        </Card>
                                      </Grid>
                                    ))}
                                    {supplierProducts.length > 6 && (
                                      <Grid item xs={12}>
                                        <Typography variant="caption" color="text.secondary">
                                          ... v√† {supplierProducts.length - 6} s·∫£n ph·∫©m kh√°c
                                        </Typography>
                                      </Grid>
                                    )}
                                  </Grid>
                                ) : (
                                  <Typography variant="body2" color="text.secondary" style={{ fontStyle: 'italic' }}>
                                    Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o t·ª´ nh√† cung c·∫•p n√†y
                                  </Typography>
                                )}
                              </CardContent>
                            </Card>
                          </Collapse>
                        </React.Fragment>
                      );
                    })}
                    
                    {filteredSuppliers.length === 0 && supplierSearch && (
                      <ListItem>
                        <ListItemText 
                          primary="Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p n√†o"
                          secondary="Th·ª≠ t·ª´ kh√≥a kh√°c ho·∫∑c ki·ªÉm tra ch√≠nh t·∫£"
                        />
                      </ListItem>
                    )}
                  </List>
                </Box>
              </Grid>
            )}
            
            {/* Product Lookup */}
            {quickLookupMode === 'product' && (
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n, SKU ho·∫∑c danh m·ª•c..."
                  value={productSearch}
                  onChange={(e) => setProductSearch(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon />
                      </InputAdornment>
                    )
                  }}
                  sx={{ mb: 2 }}
                />
                
                <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>S·∫£n ph·∫©m</TableCell>
                        <TableCell>Nh√† cung c·∫•p</TableCell>
                        <TableCell>Gi√° & L·ª£i nhu·∫≠n</TableCell>
                        <TableCell>T·ªìn kho</TableCell>
                        <TableCell align="center">Thao t√°c</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {filteredProducts.slice(0, 15).map((product) => {
                        const primarySupplier = suppliers.find(s => s.id === product.primary_supplier_id);
                        return (
                          <TableRow key={product.id} hover>
                            <TableCell>
                              <Typography variant="body2" fontWeight="bold">
                                {product.name}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                SKU: {product.sku} ‚Ä¢ {product.category}
                              </Typography>
                            </TableCell>
                            <TableCell>
                              <Typography variant="body2">
                                {primarySupplier?.name || 'Kh√¥ng c√≥'}
                              </Typography>
                              {primarySupplier && (
                                <Typography variant="caption" color="text.secondary">
                                  ‚≠ê {primarySupplier.performance_rating?.toFixed(1) || 'N/A'}
                                </Typography>
                              )}
                            </TableCell>
                            <TableCell>
                              <Typography variant="body2" fontWeight="bold">
                                {formatPrice(product.selling_price || 0)}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                V·ªën: {formatPrice(product.cost_price || 0)}
                              </Typography>
                              <Typography variant="caption" color="success.main" display="block">
                                L√£i: {calculateProfitMargin(product.selling_price, product.cost_price)}%
                              </Typography>
                            </TableCell>
                            <TableCell>
                              <Box display="flex" alignItems="center" gap={0.5}>
                                <span>{getStockIcon(product.stock_level, product.minimum_stock)}</span>
                                <Typography 
                                  variant="body2"
                                  color={getStockLevelColor(product.stock_level, product.minimum_stock) + '.main'}
                                >
                                  {product.stock_level}
                                </Typography>
                              </Box>
                              <Typography variant="caption" color="text.secondary">
                                Min: {product.minimum_stock}
                              </Typography>
                            </TableCell>
                            <TableCell align="center">
                              <Tooltip title="Xem chi ti·∫øt">
                                <IconButton 
                                  size="small" 
                                  onClick={() => handleProductView(product)}
                                >
                                  <ViewIcon />
                                </IconButton>
                              </Tooltip>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                      
                      {filteredProducts.length === 0 && productSearch && (
                        <TableRow>
                          <TableCell colSpan={5} align="center">
                            <Typography variant="body2" color="text.secondary" style={{ fontStyle: 'italic' }}>
                              Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o v·ªõi t·ª´ kh√≥a "{productSearch}"
                            </Typography>
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>
            )}
          </Grid>
        </CardContent>
      </Card>

      {/* Product Detail Dialog */}
      <Dialog open={openProductDialog} onClose={() => setOpenProductDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          Chi ti·∫øt s·∫£n ph·∫©m - {selectedProduct?.name}
        </DialogTitle>
        <DialogContent>
          {selectedProduct && (
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Th√¥ng tin c∆° b·∫£n</Typography>
                    <Typography><strong>SKU:</strong> {selectedProduct.sku}</Typography>
                    <Typography><strong>T√™n:</strong> {selectedProduct.name}</Typography>
                    <Typography><strong>Danh m·ª•c:</strong> {selectedProduct.category}</Typography>
                    <Typography><strong>M√¥ t·∫£:</strong> {selectedProduct.description || 'Kh√¥ng c√≥'}</Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={6}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Gi√° v√† t·ªìn kho</Typography>
                    <Typography><strong>Gi√° b√°n:</strong> {formatPrice(selectedProduct.selling_price || 0)}</Typography>
                    <Typography><strong>Gi√° v·ªën:</strong> {formatPrice(selectedProduct.cost_price || 0)}</Typography>
                    <Typography><strong>L·ª£i nhu·∫≠n:</strong> {calculateProfitMargin(selectedProduct.selling_price, selectedProduct.cost_price)}%</Typography>
                    <Typography>
                      <strong>T·ªìn kho:</strong> {getStockIcon(selectedProduct.stock_level, selectedProduct.minimum_stock)} {selectedProduct.stock_level} 
                      (Min: {selectedProduct.minimum_stock})
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Nh√† cung c·∫•p</Typography>
                    {(() => {
                      const primarySupplier = suppliers.find(s => s.id === selectedProduct.primary_supplier_id);
                      const backupSupplier = suppliers.find(s => s.id === selectedProduct.backup_supplier_id);
                      return (
                        <Grid container spacing={2}>
                          {primarySupplier && (
                            <Grid item xs={12} md={6}>
                              <Typography variant="subtitle2">Nh√† cung c·∫•p ch√≠nh:</Typography>
                              <Typography>{primarySupplier.name}</Typography>
                              <Typography variant="body2" color="text.secondary">
                                üìû {primarySupplier.phone} ‚Ä¢ ‚úâÔ∏è {primarySupplier.email}
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                ‚≠ê {primarySupplier.performance_rating?.toFixed(1) || 'N/A'} ‚Ä¢ 
                                üöö {primarySupplier.average_delivery_days || 15} ng√†y
                              </Typography>
                            </Grid>
                          )}
                          {backupSupplier && (
                            <Grid item xs={12} md={6}>
                              <Typography variant="subtitle2">Nh√† cung c·∫•p d·ª± ph√≤ng:</Typography>
                              <Typography>{backupSupplier.name}</Typography>
                              <Typography variant="body2" color="text.secondary">
                                üìû {backupSupplier.phone} ‚Ä¢ ‚úâÔ∏è {backupSupplier.email}
                              </Typography>
                              <Typography variant="body2" color="text.secondary">
                                ‚≠ê {backupSupplier.performance_rating?.toFixed(1) || 'N/A'} ‚Ä¢ 
                                üöö {backupSupplier.average_delivery_days || 15} ng√†y
                              </Typography>
                            </Grid>
                          )}
                        </Grid>
                      );
                    })()}
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenProductDialog(false)}>ƒê√≥ng</Button>
          <Button variant="contained" onClick={() => {
            // Navigate to product management or edit
            window.location.href = `/products/${selectedProduct?.id}/edit`;
          }}>
            Ch·ªânh s·ª≠a s·∫£n ph·∫©m
          </Button>
        </DialogActions>
      </Dialog>

      {/* Quick Tips Alert */}
      <Alert 
        severity="info" 
        sx={{ 
          mb: 2,
          bgcolor: '#e3f2fd',
          '& .MuiAlert-icon': { color: '#1976d2' }
        }}
      >
        üí° <strong>M·∫πo tƒÉng hi·ªáu su·∫•t:</strong> S·ª≠ d·ª•ng Ctrl+N ƒë·ªÉ t·∫°o listing nhanh, 
        "Tra c·ª©u nhanh" ƒë·ªÉ t√¨m th√¥ng tin nh√† cung c·∫•p v√† s·∫£n ph·∫©m khi fulfillment ƒë∆°n h√†ng, 
        ho·∫∑c nh·∫•n v√†o "T·ªëi ∆∞u h√†ng lo·∫°t" ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu items c√πng l√∫c. 
        M·ª•c ti√™u h√¥m nay: ho√†n th√†nh {todayStats.targetListings} listings!
      </Alert>
    </MainLayout>
  );
};

export default EmployeeWorkspace;