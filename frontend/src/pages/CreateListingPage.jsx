import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  MenuItem,
  Alert,
  Divider,
} from '@mui/material';
import {
  InfoOutlined as InfoIcon,
  Inventory2Outlined as BoxIcon,
  LocalShippingOutlined as TruckIcon,
  VisibilityOutlined as EyeIcon,
  SaveOutlined as SaveIcon,
  AddCircleOutlined as PlusIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import MainLayout from '../components/Layout/MainLayout';

const CreateListingPage = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [previewData, setPreviewData] = useState({});
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    price: '',
    category: '',
    condition: 'new',
    brand: '',
    model: '',
    color: '',
    ebayAccount: '',
    shipping: '',
    tags: '',
  });

  const categories = [
    { value: 'electronics', label: 'Electronics' },
    { value: 'clothing', label: 'Clothing & Accessories' },
    { value: 'home', label: 'Home & Garden' },
    { value: 'sports', label: 'Sports & Recreation' },
    { value: 'toys', label: 'Toys & Games' },
  ];

  const conditions = [
    { value: 'new', label: 'M·ªõi' },
    { value: 'like-new', label: 'Nh∆∞ m·ªõi' },
    { value: 'used', label: 'ƒê√£ s·ª≠ d·ª•ng' },
    { value: 'refurbished', label: 'T√¢n trang' },
  ];

  const ebayAccounts = [
    { value: 'Store_VN_01', label: 'Store_VN_01' },
    { value: 'Store_VN_02', label: 'Store_VN_02' },
    { value: 'Store_US_01', label: 'Store_US_01' },
  ];

  const handleInputChange = (field) => (event) => {
    const value = event.target.value;
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Update preview for title and price
    if (field === 'title' || field === 'price') {
      setPreviewData(prev => ({ ...prev, [field]: value }));
    }
  };

  const validateForm = () => {
    const errors = [];
    
    if (!formData.title.trim()) {
      errors.push('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ s·∫£n ph·∫©m');
    }
    
    if (!formData.price || parseFloat(formData.price) <= 0) {
      errors.push('Vui l√≤ng nh·∫≠p gi√° b√°n h·ª£p l·ªá');
    }
    
    if (!formData.category) {
      errors.push('Vui l√≤ng ch·ªçn danh m·ª•c');
    }
    
    if (!formData.ebayAccount) {
      errors.push('Vui l√≤ng ch·ªçn t√†i kho·∫£n eBay');
    }
    
    return errors;
  };

  const handleSaveDraft = async () => {
    if (!formData.title.trim()) {
      alert('‚ùó Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ s·∫£n ph·∫©m');
      return;
    }

    setIsLoading(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      alert('‚úÖ ƒê√£ l∆∞u listing v√†o nh√°p!\n\nB·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ch·ªânh s·ª≠a sau.');
    } catch (error) {
      alert('‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u nh√°p');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateListing = async () => {
    const errors = validateForm();
    
    if (errors.length > 0) {
      alert('‚ùó Vui l√≤ng ki·ªÉm tra l·∫°i:\n\n' + errors.join('\n'));
      return;
    }

    setIsLoading(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      alert('üéâ T·∫°o listing th√†nh c√¥ng!\n\nListing ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch v√† s·∫µn s√†ng ƒë·ªÉ b√°n.');
      
      // Navigate to listings page after success
      setTimeout(() => {
        navigate('/listings');
      }, 1000);
    } catch (error) {
      alert('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o listing');
    } finally {
      setIsLoading(false);
    }
  };

  const formatPrice = (price) => {
    const numPrice = parseFloat(price);
    return isNaN(numPrice) ? '0.00' : numPrice.toFixed(2);
  };

  return (
    <MainLayout>
      <Box sx={{ maxWidth: 800, mx: 'auto', mb: 4 }}>
        {/* Page Header */}
        <Typography variant="h4" sx={{ fontWeight: 600, color: 'text.primary', mb: 4 }}>
          T·∫°o Listing M·ªõi
        </Typography>

        {/* Basic Information */}
        <Card sx={{ mb: 3 }}>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <InfoIcon sx={{ mr: 1, color: 'primary.main' }} />
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                Th√¥ng tin c∆° b·∫£n
              </Typography>
            </Box>
            
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Ti√™u ƒë·ªÅ s·∫£n ph·∫©m *"
                  value={formData.title}
                  onChange={handleInputChange('title')}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ h·∫•p d·∫´n cho s·∫£n ph·∫©m..."
                  inputProps={{ maxLength: 80 }}
                  helperText={`${formData.title.length}/80 k√Ω t·ª±. Bao g·ªìm t·ª´ kh√≥a quan tr·ªçng ·ªü ƒë·∫ßu.`}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  multiline
                  rows={5}
                  label="M√¥ t·∫£ s·∫£n ph·∫©m"
                  value={formData.description}
                  onChange={handleInputChange('description')}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m c·ªßa b·∫°n..."
                  helperText="M√¥ t·∫£ c√†ng chi ti·∫øt c√†ng t·ªët ƒë·ªÉ thu h√∫t kh√°ch h√†ng."
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Gi√° b√°n ($) *"
                  value={formData.price}
                  onChange={handleInputChange('price')}
                  placeholder="0.00"
                  inputProps={{ step: '0.01', min: '0' }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  select
                  label="Danh m·ª•c *"
                  value={formData.category}
                  onChange={handleInputChange('category')}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                >
                  <MenuItem value="">
                    <Typography color="text.secondary">Ch·ªçn danh m·ª•c</Typography>
                  </MenuItem>
                  {categories.map((category) => (
                    <MenuItem key={category.value} value={category.value}>
                      {category.label}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Product Details */}
        <Card sx={{ mb: 3 }}>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <BoxIcon sx={{ mr: 1, color: 'primary.main' }} />
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                Chi ti·∫øt s·∫£n ph·∫©m
              </Typography>
            </Box>
            
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  select
                  label="T√¨nh tr·∫°ng *"
                  value={formData.condition}
                  onChange={handleInputChange('condition')}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                >
                  {conditions.map((condition) => (
                    <MenuItem key={condition.value} value={condition.value}>
                      {condition.label}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Th∆∞∆°ng hi·ªáu"
                  value={formData.brand}
                  onChange={handleInputChange('brand')}
                  placeholder="T√™n th∆∞∆°ng hi·ªáu"
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Model/Phi√™n b·∫£n"
                  value={formData.model}
                  onChange={handleInputChange('model')}
                  placeholder="Model ho·∫∑c s·ªë phi√™n b·∫£n"
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="M√†u s·∫Øc"
                  value={formData.color}
                  onChange={handleInputChange('color')}
                  placeholder="M√†u s·∫Øc s·∫£n ph·∫©m"
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Shipping & Account */}
        <Card sx={{ mb: 3 }}>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <TruckIcon sx={{ mr: 1, color: 'primary.main' }} />
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                V·∫≠n chuy·ªÉn & T√†i kho·∫£n
              </Typography>
            </Box>
            
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  select
                  label="T√†i kho·∫£n eBay *"
                  value={formData.ebayAccount}
                  onChange={handleInputChange('ebayAccount')}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                >
                  <MenuItem value="">
                    <Typography color="text.secondary">Ch·ªçn t√†i kho·∫£n</Typography>
                  </MenuItem>
                  {ebayAccounts.map((account) => (
                    <MenuItem key={account.value} value={account.value}>
                      {account.label}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Ph√≠ v·∫≠n chuy·ªÉn ($)"
                  value={formData.shipping}
                  onChange={handleInputChange('shipping')}
                  placeholder="0.00"
                  inputProps={{ step: '0.01', min: '0' }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Tags/T·ª´ kh√≥a"
                  value={formData.tags}
                  onChange={handleInputChange('tags')}
                  placeholder="iPhone, smartphone, unlocked, apple..."
                  helperText="Ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y. Gi√∫p kh√°ch h√†ng d·ªÖ t√¨m th·∫•y s·∫£n ph·∫©m."
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                    },
                  }}
                />
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Preview Section */}
        <Card sx={{ mb: 3 }}>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
              <EyeIcon sx={{ mr: 1, color: 'primary.main' }} />
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                Xem tr∆∞·ªõc
              </Typography>
            </Box>
            
            <Box
              sx={{
                background: '#f8f9fa',
                border: '2px dashed #dee2e6',
                borderRadius: 2,
                p: 3,
                textAlign: previewData.title || previewData.price ? 'left' : 'center',
                color: 'text.secondary',
              }}
            >
              {previewData.title || previewData.price ? (
                <Box>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: 'text.primary' }}>
                    {previewData.title || 'Ti√™u ƒë·ªÅ s·∫£n ph·∫©m'}
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 600, color: 'success.main', mb: 2 }}>
                    ${formatPrice(previewData.price || '0')}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Preview s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi b·∫°n nh·∫≠p th√¥ng tin
                  </Typography>
                </Box>
              ) : (
                <Box>
                  <EyeIcon sx={{ fontSize: '3rem', color: '#ccc', mb: 2 }} />
                  <Typography variant="body1" sx={{ mb: 1 }}>
                    Xem tr∆∞·ªõc listing s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ƒêi·ªÅn th√¥ng tin b√™n tr√™n ƒë·ªÉ xem preview
                  </Typography>
                </Box>
              )}
            </Box>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <Card>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
              <Button
                variant="outlined"
                startIcon={<SaveIcon />}
                onClick={handleSaveDraft}
                disabled={isLoading}
                sx={{
                  borderRadius: 2,
                  textTransform: 'none',
                  px: 4,
                  py: 1.5,
                }}
              >
                L∆∞u nh√°p
              </Button>
              <Button
                variant="contained"
                startIcon={<PlusIcon />}
                onClick={handleCreateListing}
                disabled={isLoading}
                sx={{
                  borderRadius: 2,
                  textTransform: 'none',
                  px: 4,
                  py: 1.5,
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)',
                    transform: 'translateY(-2px)',
                    boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)',
                  },
                }}
              >
                {isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o Listing'}
              </Button>
            </Box>
          </CardContent>
        </Card>
      </Box>
    </MainLayout>
  );
};

export default CreateListingPage;